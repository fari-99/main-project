server {
    listen 80;
    server_name api.{{ NGINX_HOSTNAME }};
    root '/var/www';
    client_max_body_size 64M;

    # Deny access to any files with a .php extension in the uploads directory
    location ~* /(?:uploads|files)/.*\.php$ {
        deny all;
    }

    location / {
        set $env '{{ APP_ENV }}';
        if ( $env = 'dev') {
                set $cors "true";
        }

        # Nginx doesn't support nested If statements. This is where things get slightly nasty.
        # Determine the HTTP request method used

        if ($request_method = 'OPTIONS') {
            set $cors "${cors}options";
        }
        if ($request_method = 'GET') {
            set $cors "${cors}get";
        }
        if ($request_method = 'POST') {
            set $cors "${cors}post";
        }
        if ($request_method = 'PUT') {
            set $cors "${cors}put";
        }
        if ($request_method = 'DELETE') {
            set $cors "${cors}delete";
        }

        if ($cors = "true") {
            # Catch all incase there's a request method we're not dealing with properly
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        }

        if ($cors = "trueget") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'AccessToken,App-Id,User-Type,User-Id,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;
        }

        if ($cors = "trueoptions") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;

            #
            # Om nom nom cookies
            #

            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;

            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #

            add_header 'Access-Control-Allow-Headers' 'AccessToken,App-Id,User-Type,User-Id,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;

            #
            # Tell client that this pre-flight info is valid for 20 days
            #

            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }

        if ($cors = "truepost") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'AccessToken,App-Id,User-Type,User-Id,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;

        }

        if ($cors = "trueput") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'AccessToken,App-Id,User-Type,User-Id,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;

        }

        if ($cors = "truedelete") {
            add_header 'Access-Control-Allow-Origin' "$http_origin" always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'AccessToken,App-Id,User-Type,User-Id,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type' always;

        }
        proxy_pass http://satanic;
    }
    
    location ~ /\.ht {
        deny all;
    }
}                                                                                                    
