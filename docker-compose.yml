version: '2.4'
services:
  proxy:
    container_name: ${PROJECT_NAME}-proxy
    build: ./servers/proxy
    environment:
      - "DOMAIN=${PROJECT_DOMAIN}"
    volumes:
      # - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./workspace:/var/www
      - ./logs/nginx/:/var/log/nginx
    ports:
      - "${PROXY_PORT}:80"

  ## MAIL SERVICE
  mailcatcher:
    container_name: ${PROJECT_NAME}-mail
    image: sj26/mailcatcher
    restart: on-failure:10
    ports:
      - "${SMTP_PORT}:1025"
      - "${SMTP_GUI}:1080"

  ## SERVICES
  go-api.fadhlan.loc:
    container_name: ${PROJECT_NAME}-${GO_API_NAME}
    environment:
      APP_NAME: ${GO_API_NAME}
    env_file: ./global.env
    build:
      context: ./servers/go-global
      dockerfile: Dockerfile
      target: dev
    volumes:
      - ./workspace/${GO_API_NAME}:/go/src/${GO_API_NAME}
      - ./servers/go-global/scripts:/scripts
      - ./global.env:/env_files/global.env
      - ./.env:/env_files/app.env
      - ./storages:/go/src/${GO_API_NAME}/storages
    working_dir: /go/src/${GO_API_NAME}
    ports:
      - "${GO_API_PORT}:8080"
    depends_on:
      - db-web

  ## REDIS
  redis:
    container_name: ${PROJECT_NAME}-${REDIS_APP_NAME}
    build: ./servers/${REDIS_APP_NAME}
    command: redis-server --requirepass root
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/redis/data

  redis-management:
    container_name: ${PROJECT_NAME}-redis-management
    image: patrikx3/p3x-redis-ui:latest
    ports:
        - "${REDIS_MANAGEMENT_PORT}:16379"
    volumes:
        - ./servers/redis/settings:/settings

  ## DATABASE & MIGRATION TOOL
  db-web:
    container_name: ${PROJECT_NAME}-db-web
    image: percona
    ports:
      - "${DATABASE_PORT_MYSQL}:3306"
    environment:
      - MYSQL_DATABASE=cool_database
      - MYSQL_ROOT_USER=root
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_ROOT_HOST=%
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8 --collation-server=utf8_general_ci
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "20"
        
  db-migration:
    container_name: ${PROJECT_NAME}-migration
    image: flyway/flyway
    tty: true
    # command: -locations="filesystem:/flyway/sql" -url=jdbc:mysql://db-web:3306/${DATABASE_NAME_MYSQL} -user=${USERNAME_DB_MYSQL} -password=${PASSWORD_DB_MYSQL} -connectRetries=10 info
    command: -baselineOnMigrate="true" -locations="filesystem:/flyway/sql" -url=jdbc:mysql://db-web:3306/cool_database -user=root -password=root -connectRetries=10 migrate
    volumes:
      - ./workspace/database-migration/mysql:/flyway/sql
    working_dir: /flyway/sql
    depends_on:
      - db-web
  
  db-postgres:
    container_name: ${PROJECT_NAME}-db-postgres
    image: postgres:12
    restart: always
    ports:
      - "${DATABASE_PORT_POSTGRES}:5432"
    environment:
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data

  ## ELASTIC
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: ${PROJECT_NAME}-elasticsearch
    environment:
      - node.name=${PROJECT_NAME}-node1
      - cluster.name=${PROJECT_NAME}-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./storages:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_API_HTTP_PORT}:9200"
    healthcheck:
      interval: 10s
      retries: 12
      test: curl -s http://localhost:${ELASTICSEARCH_API_HTTP_PORT}/_cluster/health | grep -vq '"status":"red"'

  kibana:
    container_name: ${PROJECT_NAME}-kibana
    image: docker.elastic.co/kibana/kibana:7.10.2
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:${ELASTICSEARCH_API_HTTP_PORT}
      - ELASTICSEARCH_HOSTS=http://elasticsearch:${ELASTICSEARCH_API_HTTP_PORT}
      - xpack.security.enabled=false
      - xpack.reporting.encryptionKey=HRTXzGsM5hqMk6AHzY6grRNUXpYu8GA4AYkFgVcfehvsyAr5TB
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "${ELASTICSEARCH_KIBANA_PORT}:5601"
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:${ELASTICSEARCH_KIBANA_PORT}/api/status

  ## RabbitMQ
  rabbitmq:
    container_name: ${PROJECT_NAME}-rabbitmq
    build: 
      context: ./servers/rabbitmq
      dockerfile: Dockerfile
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    labels:
      - "SERVICE_IGNORE=true"

  ## STORAGES
  sftp:
    container_name: ${PROJECT_NAME}-sftp
    image: atmoz/sftp
    volumes: 
      - ./servers/ftp/users.conf:/etc/sftp/users.conf:ro
      - ./storages:/home/ftp
    ports: 
      - "${FTP_PORT}:22"

  ## GraphQL
  graphql-engine.fadhlan.loc:
    container_name: ${PROJECT_NAME}-graphql
    image: hasura/graphql-engine:v2.5.0-beta.1
    ports:
    - "${GRAPHQL_PORT}:8080"
    depends_on:
    - "db-postgres"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:password@db-postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:password@db-postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      ## uncomment next line to set jwt authentication
      HASURA_GRAPHQL_JWT_SECRET: '{"type": "HS256","key": "5Qe3XQhqmjvjCRbBEaDGD5D8fN3uCDXk","claims_namespace_path":"$$.hasura_claim","claims_format": "json","issuer": "go-api"}'

volumes:
  redis-data:
  mysql-data:
  postgres_data: